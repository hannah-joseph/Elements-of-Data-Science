Lab 04 Functions and Visualization
Elements of Data Science

Welcome to lab 4! This week, we will focus on functions and visualization.
Functions are described in Chapter 8 of the Inferential Thinking text.
Visualizations is covered in Chapter 7. First, set up the tests and imports by running the cell below.

# Enter your name as a string
name = 'Hannah'
name
'Hannah'
import numpy as np
from datascience import *
%matplotlib inline
import matplotlib.pyplot as plt
plt.style.use('fivethirtyeight')
# Fix for datascience plots
import collections as collections
import collections.abc as abc
collections.Iterable = abc.Iterable
# These lines load the tests.
from gofer.ok import check
Let's explore the most recent COVID data from the New York Times
This data is updated and stored at GitHub: https://github.com/nytimes/covid-19-data
US rolling average: https://raw.githubusercontent.com/nytimes/covid-19-data/master/rolling-averages/us.csv
US States rolling average: https://raw.githubusercontent.com/nytimes/covid-19-data/master/rolling-averages/us-states.csv

COVID_data = 'https://raw.githubusercontent.com/nytimes/covid-19-data/master/rolling-averages/us.csv'
COVID=Table.read_table(COVID_data)
COVID=COVID.set_format(0, DateFormatter(format='%Y-%m-%d',))
If the above read does not work we can use the data handling packages pandas as first discussed in the introduction to Lab 03. It can be run by removing comments, #, in front of the below lines.

import pandas as pd
data_db = pd.read_csv(COVID_data)
COVID = Table.from_df(data_db) 
COVID=COVID.set_format(0, DateFormatter(format='%Y-%m-%d',))
COVID.sort("date",descending=False) # Display most recent first
date	geoid	cases	cases_avg	cases_avg_per_100k	deaths	deaths_avg	deaths_avg_per_100k
2020-01-21	USA	1	0.14	0	0	0	0
2020-01-22	USA	0	0.14	0	0	0	0
2020-01-23	USA	0	0.14	0	0	0	0
2020-01-24	USA	1	0.29	0	0	0	0
2020-01-25	USA	1	0.43	0	0	0	0
2020-01-26	USA	2	0.71	0	0	0	0
2020-01-27	USA	0	0.71	0	0	0	0
2020-01-28	USA	0	0.71	0	0	0	0
2020-01-29	USA	0	0.71	0	0	0	0
2020-01-30	USA	1	0.86	0	0	0	0
... (1118 rows omitted)

Use where to select data from November - December 2021
Here are the possible arguments for the where Table method:

Predicate	Example	Result
are.equal_to	are.equal_to(50)	Find rows with values equal to 50
are.not_equal_to	are.not_equal_to(50)	Find rows with values not equal to 50
are.above	are.above(50)	Find rows with values above (and not equal to) 50
are.above_or_equal_to	are.above_or_equal_to(50)	Find rows with values above 50 or equal to 50
are.below	are.below(50)	Find rows with values below 50
are.between	are.between(2, 10)	Find rows with values above or equal to 2 and below 10
COVID.where("deaths",are.between(0,1))
date	geoid	cases	cases_avg	cases_avg_per_100k	deaths	deaths_avg	deaths_avg_per_100k
2020-01-21	USA	1	0.14	0	0	0	0
2020-01-22	USA	0	0.14	0	0	0	0
2020-01-23	USA	0	0.14	0	0	0	0
2020-01-24	USA	1	0.29	0	0	0	0
2020-01-25	USA	1	0.43	0	0	0	0
2020-01-26	USA	2	0.71	0	0	0	0
2020-01-27	USA	0	0.71	0	0	0	0
2020-01-28	USA	0	0.71	0	0	0	0
2020-01-29	USA	0	0.71	0	0	0	0
2020-01-30	USA	1	0.86	0	0	0	0
... (39 rows omitted)

Dates produce an error as you will see in the next cell, below we will see the steps needed to work with dates

# Dates produce an error, below we will see the steps needed to work with dates
import time
from time import strptime
time1a = strptime('2021-11-01', '%Y-%m-%d')
time1= time.mktime(time1a)
time2a= strptime('2021-12-01', '%Y-%m-%d')
time2= time.mktime(time2a)
COVID.where(0,are.between(time1,time2))
date	geoid	cases	cases_avg	cases_avg_per_100k	deaths	deaths_avg	deaths_avg_per_100k
2021-11-01	USA	124570	73390.2	22.12	1151	1347.29	0.41
2021-11-02	USA	76943	71604.6	21.58	1516	1337.15	0.4
2021-11-03	USA	84844	71166.6	21.45	1880	1328.74	0.4
2021-11-04	USA	83087	70636	21.29	1123	1295.66	0.39
2021-11-05	USA	91768	71224.9	21.47	2321	1238.27	0.37
2021-11-06	USA	31939	71185.9	21.45	402	1228.55	0.37
2021-11-07	USA	22085	71786.1	21.63	132	1221.68	0.37
2021-11-08	USA	126461	74097.1	22.33	1221	1208.3	0.36
2021-11-09	USA	83651	75324.4	22.7	1716	1224.58	0.37
2021-11-10	USA	98390	76860.2	23.16	1636	1213.69	0.37
... (20 rows omitted)

Dates and times in Tables
One thing that is more complicated then we would like but is a common need for a data scientist is encoding data and time. Computer operating systems like Windows and Linux use as a reference point or epoch January 1, 1970 and determine the number of seconds since midnight the start of 1970 to do time computations.

Seconds since January 1, 1970 today is given by time.time() after importing time module:

import time                # Python time functions
from time import strptime 
time.time() # Seconds since common epoch
1677044058.5742025
We can also use a string containing the year, month & day using the strptime function.

time0 = strptime('2020-01-21', '%Y-%m-%d')
time.mktime(time0)
1579564800.0
We can also use the data type of the numpy array to generate an appropriate conversion from the number of seconds since midnight the start of 1970 to legible dates.

np.array([0, 1579564800], dtype='datetime64[s]') # See above for seconds resulting from string '2020-01-21'
array(['1970-01-01T00:00:00', '2020-01-21T00:00:00'], dtype='datetime64[s]')
Now we can recast example as a datetime64 object

example = np.array([0, 1579564800])
print('Original example: ',example)           
example = example.astype('datetime64[s]')
print('example as datetime64 object: ',example)
Original example:  [         0 1579564800]
example as datetime64 object:  ['1970-01-01T00:00:00' '2020-01-21T00:00:00']
Question 1:
Determine the number of seconds between January 21, 2020 (considered the start of the COVID pandemic in the US) and December 31, 2021 (both at midnight). Remember doing this in Lab02 for seconds over a period of years.
Use two methods:
A) Multiplying 60 seconds * 60 minutes * 24 hours * ... this is difftimeA
B) Using strptime and time.mktime() ... this is difftimeB

seconds= 60
minutes= 60
hours_in_one_day= 24
days_from_jan_to_dec= (365*2)-20
difftimeA = seconds* minutes*hours_in_one_day*days_from_jan_to_dec # Compute through multiplaction 60 seconds * 60 minutes * 24 hours * ... 

time1a = strptime('2020-01-21', '%Y-%m-%d')
time1 = time.mktime(time1a)
time2a = strptime('2021-12-31', '%Y-%m-%d')
time2 = time.mktime(time2a)

difftimeB = time2-time1
print(difftimeB, difftimeA)
61344000.0 61344000
check('tests/q1a.py')
All tests passed!

Question 2:
The date in the COVID table evaluates to a time in seconds since the epoch like evaluated above. Now define a subset of the data to examine trends between November and December of 2021

time1a = strptime('2021-11-01', '%Y-%m-%d') # Seconds since epoch
time1= time.mktime(time1a)
time2a= strptime('2021-12-01', '%Y-%m-%d')  # Seconds since epoch
time2= time.mktime(time2a)
Late2021 = COVID.where(0,are.between(time1,time2))
Late2021
date	geoid	cases	cases_avg	cases_avg_per_100k	deaths	deaths_avg	deaths_avg_per_100k
2021-11-01	USA	124570	73390.2	22.12	1151	1347.29	0.41
2021-11-02	USA	76943	71604.6	21.58	1516	1337.15	0.4
2021-11-03	USA	84844	71166.6	21.45	1880	1328.74	0.4
2021-11-04	USA	83087	70636	21.29	1123	1295.66	0.39
2021-11-05	USA	91768	71224.9	21.47	2321	1238.27	0.37
2021-11-06	USA	31939	71185.9	21.45	402	1228.55	0.37
2021-11-07	USA	22085	71786.1	21.63	132	1221.68	0.37
2021-11-08	USA	126461	74097.1	22.33	1221	1208.3	0.36
2021-11-09	USA	83651	75324.4	22.7	1716	1224.58	0.37
2021-11-10	USA	98390	76860.2	23.16	1636	1213.69	0.37
... (20 rows omitted)

check('tests/q2a.py')
All tests passed!

Plot
If we attempt to plot using the 'date' column we get the seconds from the epoch (January 1, 1970). This does not work well so we will address this below.

Late2021.plot('date','cases_avg_per_100k')

Plot with Plotly
Plotly offers enhanced plots with different syntax. Plotly has become a mainstay in visualizing data. The figure can be saved by clicking on the camera icon in the upper right corner of the figure.

import plotly.express as px

series1 = Late2021.column('cases_avg_per_100k')
date = Late2021.column('date')
fig = px.line(x=date, y=[series1])

fig.show()
import plotly.express as px

series1 = Late2021.column('cases_avg_per_100k')
date = Late2021.column('date').astype('datetime64[s]') # Using the retyping of the column which is a nump array
fig = px.line(x=date, y=[series1])

fig.show()
Histogram
A histogram method is realized by appending .hist('column name')

Late2021.hist('deaths')

Late2021.stats()
statistic	date	geoid	cases	cases_avg	cases_avg_per_100k	deaths	deaths_avg	deaths_avg_per_100k
min	1.63572e+09	USA	22085	70636	21.29	121	917.71	0.28
max	1.63823e+09	USA	216312	95172.2	28.68	3331	1347.29	0.41
median	1.63698e+09		87665	81962.6	24.7	1206	1138.37	0.345
sum	4.91093e+10		2.58669e+06	2.46354e+06	742.44	35440	34471	10.41
Question 3
Construct a histogram and stats for November - December 2020 and compare this to those from November - December 2021 in a markdown cell below the histogram and statistics.

time1a = strptime('2020-11-01', '%Y-%m-%d') 
time1= time.mktime(time1a)
time2a= strptime('2020-12-01', '%Y-%m-%d')
time2= time.mktime(time2a)
Late2020 = COVID.where(0,are.between(time1,time2))
Late2020
date	geoid	cases	cases_avg	cases_avg_per_100k	deaths	deaths_avg	deaths_avg_per_100k
2020-11-01	USA	74195	82648.8	24.91	428	820.8	0.25
2020-11-02	USA	94006	85497.1	25.77	540	824.6	0.25
2020-11-03	USA	92416	88094.1	26.55	1130	844.56	0.25
2020-11-04	USA	108078	91858.4	27.68	1616	869.25	0.26
2020-11-05	USA	121349	96266.1	29.01	1108	888.73	0.27
2020-11-06	USA	132823	100960	30.43	1248	930.9	0.28
2020-11-07	USA	125931	106991	32.24	1007	955.62	0.29
2020-11-08	USA	103323	111334	33.55	464	949.33	0.29
2020-11-09	USA	130444	116338	35.06	745	979.68	0.3
2020-11-10	USA	139684	123090	37.1	1464	1030.93	0.31
... (20 rows omitted)

check('tests/q3a.py')
All tests passed!

Late2020.hist('deaths')
Late2020.stats()
statistic	date	geoid	cases	cases_avg	cases_avg_per_100k	deaths	deaths_avg	deaths_avg_per_100k
min	1.60419e+09	USA	74195	82648.8	24.91	428	820.8	0.25
max	1.60669e+09	USA	205839	176740	53.27	2313	1686.06	0.51
median	1.60544e+09		147224	152791	46.045	1201	1149.38	0.35
sum	4.81632e+10		4.40631e+06	4.20298e+06	1266.68	37519	36388.3	10.98

Your comparison in this markdown cell (double click to edit)
The number of deaths in 2020 were gradually increasing from November to December of 2020. In 2021, about 8% of deaths from the total population were from 0-500 and around 1500. In 2020, about 10% of deaths from the total population ranged around 1000, and 9% of deaths were around 1500.
Plotting with dates
Dates can also be tricky to get a good x-axis. This is particularly complicated with the time being defined as seconds since the common epoch of January 1, 1970 @12 midnight.

# Input Data to plot
dates = Late2021.column('date')  
deaths = Late2021.column('deaths') 
# mdates does the trick!
## DATE PLOTTING CODE TEMPLATE TO COPY ##
import matplotlib.dates as mdates
date = Late2021.column('date').astype('datetime64[s]') # Need to convert to a datetime64[s] object
loc = mdates.AutoDateLocator() # Fancy function for dates
fmt = mdates.AutoDateFormatter(loc)
plt.gca().xaxis.set_major_formatter(fmt)
plt.gca().xaxis.set_major_locator(loc)
## END: DATE PLOTTING CODE TEMPLATE TO COPY ##
#
# Now plot
plt.plot(date,deaths)
plt.gcf().autofmt_xdate()

Question 4
Now use the same plotting template (copy from above) and modify to plot your Late2020 data. In the markdown cell below, describe the differences in the line graphs between 2020 and 2021.

# Plot of November - December 2020 COVID data
dates = Late2020.column('date')
deaths = Late2020.column('deaths')
import matplotlib.dates as mdates
date = Late2020.column('date').astype('datetime64[s]') # Need to convert to a datetime64[s] object
loc = mdates.AutoDateLocator() # Fancy function for dates
fmt = mdates.AutoDateFormatter(loc)
plt.gca().xaxis.set_major_formatter(fmt)
plt.gca().xaxis.set_major_locator(loc)
# Now plot
plt.plot(date,deaths)
plt.gcf().autofmt_xdate()

Your comparison in this markdown cell (double click to edit)
The difference between Line Graph in 2021 versus the Line Graph in 2020 shows that in Line Graph 2020, the number of deaths are rising per day. Additionally, the highest peak for Line graph 202 was in 11-25-2020, where the number of deaths were above 2000. For 2021, the highest peak was around 11-17-2021, where the number of deaths were above 3000.
check('tests/q4a.py')
All tests passed!

2. Defining functions
Let's write a very simple function that converts a proportion to a percentage by multiplying it by 100. For example, the value of to_percentage(.5) should be the number 50. (No percent sign.)

A function definition has a few parts.

def
It always starts with def (short for define):

def

Name
Next comes the name of the function. Let's call our function to_percentage.

def to_percentage

Signature
Next comes something called the signature of the function. This tells Python how many arguments your function should have, and what names you'll use to refer to those arguments in the function's code. to_percentage should take one argument, and we'll call that argument proportion since it should be a proportion. ''' def to_percentage(proportion) '''

We put a colon after the signature to tell Python it's over.

def to_percentage(proportion):

Documentation
Functions can do complicated things, so you should write an explanation of what your function does. For small functions, this is less important, but it's a good habit to learn from the start. Conventionally, Python functions are documented by writing a triple-quoted string:

def to_percentage(proportion):
    """Converts a proportion to a percentage."""


Body
Now we start writing code that runs when the function is called. This is called the body of the function. We can write anything we could write anywhere else. First let's give a name to the number we multiply a proportion by to get a percentage.

def to_percentage(proportion):
    """Converts a proportion to a percentage."""
    factor = 100

return
The special instruction return in a function's body tells Python to make the value of the function call equal to whatever comes right after return. We want the value of to_percentage(.5) to be the proportion .5 times the factor 100, so we write:

def to_percentage(proportion):
    """Converts a proportion to a percentage."""
    factor = 100
    return proportion * factor
Question 5. Define to_percentage in the cell below. Call your function to convert the proportion .2 to a percentage. Name that percentage twenty_percent.

def to_percentage(proportion):
    """ Converts the proportion .2 to a percentage """
    factor = 100
    return proportion * factor

twenty_percent = to_percentage(.2)
twenty_percent
20.0
check('tests/q5a.py')
All tests passed!

Question 6. Now define another function which takes the ratio of two number and then uses the 'to_percentage' function above to convert it into a percentage. One issue is when the denominator is zero we get a result which is not a number or nan in Python. This can be changed to a zero as a place holder with one of the two little tricks shown below that can be incorporated as two lines of your code.

# First approach to deal with dividing by zero
from math import nan
z = nan
print("First: ",z)
# Use this part in your function
if z != z: # if conditional statement
    z = 0
# Up to here
print("Now: ", z)
First:  nan
Now:  0
A second approach which uses Python try: and except:. The except: is executing if the try: fails due to an exception such as computing as nan.

# Second approach: use this part in your function with z as the ratio
try:
    z = 1/0
except:
    z = 0
print("Now: ", z)
Now:  0
# Now your function...
def ratio(x1,x2):
    """ Computes a ratio of x1 to x2 """
    from math import nan
    z = nan
    if z!= z:
        z= 0
    try:
        z= x1/x2
    except:
        z= 0
    r = to_percentage(z)
    return r
ratio(1,4)
25.0
check('tests/q6a.py')
All tests passed!

COVID cases leading to bad outcomes
Now we will apply the function to our COVID data. Here we will need to use the with_columns method of a Table object to add the result of applying the ratio function with two columns as arguments. These columns will be deaths and cases. The percentage return by the function will create a new column.

See Inferential Thinking 8.1.1for inspiration:
https://inferentialthinking.com/chapters/08/1/Applying_a_Function_to_a_Column.html

Question 7. Now apply your function to create a new column, deathrate. Examine the histogram for deathrate. Now plot the trend for deathrate for the entire timeperiod of the dataset. Remember the special codes from above to define the x ('date') and y ('deathrate') data to plot. Discuss the results in the markdown cell below.

from math import nan
z = nan
def ratio(x1,x2):
    """ Computes the ratio of x1 to x2 """
    from math import nan
    z = nan
    if z!= z:
        z= 0
    try:
        z= x1/x2
    except:
        z= 0
    r = to_percentage(z)
    return r
ratio('deaths','cases')

def to_percentage(proportion):
    """ Converts the proportion to a percentage """
    factor = 100
    return proportion * factor
to_percentage('deathrate')

COVID = COVID.with_columns('deathrate',COVID.apply(ratio,'deaths','cases'))
COVID = COVID.where('deathrate', are.above(0))
COVID = COVID.where('deathrate',are.below(1)).sort('deathrate')
# Check that there are no nan...
COVID
date	geoid	cases	cases_avg	cases_avg_per_100k	deaths	deaths_avg	deaths_avg_per_100k	deathrate
2022-10-23	USA	6975	38943.9	11.74	1	360.76	0.11	0.0143369
2022-09-04	USA	5823	87231.6	26.29	1	492.47	0.15	0.0171733
2023-01-15	USA	3735	61000.8	18.38	1	563.88	0.17	0.0267738
2022-06-26	USA	18238	102766	30.97	6	347.92	0.1	0.0328983
2022-08-28	USA	8539	88645.1	26.72	3	480.69	0.14	0.0351329
2022-07-10	USA	22569	107425	32.38	8	322.08	0.1	0.0354469
2022-12-24	USA	4923	70511	21.25	2	428.05	0.13	0.0406256
2021-12-26	USA	189714	214795	64.73	79	1341.68	0.4	0.0416416
2022-07-03	USA	6861	112759	33.98	3	386.93	0.12	0.0437254
2023-01-08	USA	6100	65626.1	19.78	3	508.72	0.15	0.0491803
... (458 rows omitted)

# Histogram
COVID.hist('deathrate')

# Plot
# Be sure to re-sort data by date, the plot connect subsequent data points
import plotly.express as px

series1 = COVID.column('deathrate')
date = COVID.column('date').astype('datetime64[s]') 
fig = px.line(x=date, y=[series1])
fig.show()

# Input Data to plot
date = COVID.column('date')
deathrate = COVID.column('deathrate')

# mdates does the trick!
## USE DATE PLOTTING CODE TEMPLATE HERE ###

import matplotlib.dates as mdates
date = COVID.column('date').astype('datetime64[s]')
loc = mdates.AutoDateLocator() 
fmt = mdates.AutoDateFormatter(loc)
plt.gca().xaxis.set_major_formatter(fmt)
plt.gca().xaxis.set_major_locator(loc)

#Now Plot
plt.plot(date,deathrate)
plt.gcf().autofmt_xdate()

Your discussion of results from question 7 in this markdown cell (double click to edit)
When plotting the data onto the line graph, the reported number of deaths significantly decreased around 2023 in comparison to 2020.

check('tests/q7a.py')
All tests passed!

Congratulations , you're done with lab 4! Be sure to run all the tests and verify that they all pass (the next cell has a shortcut for that), Save and Checkpoint from the File menu Run the last two cells for partial grading. Comments and markdown will be graded separately.

# For your convenience, you can run this cell to run all the tests at once!
import glob
from gofer.ok import check
correct = 0
for x in range(1, 8):
    print('Testing question {}: '.format(str(x)))
    g = check('tests/q{}a.py'.format(str(x)))
    if g.grade == 1.0:
        print("Passed")
        correct += 1
    else:
        print('Failed')
        display(g)

print('Grade:  {}'.format(str(correct/7)))
Testing question 1: 
Passed
Testing question 2: 
Passed
Testing question 3: 
Passed
Testing question 4: 
Passed
Testing question 5: 
Passed
Testing question 6: 
Passed
Testing question 7: 
Passed
Grade:  1.0
print(name," Great work!")
Hannah  Great work!
